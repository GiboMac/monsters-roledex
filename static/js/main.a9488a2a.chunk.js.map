{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAAC,GAClB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,6BAAKL,EAAMG,QAAQG,YCDZC,G,MAAW,SAACP,GACvB,OAAO,qBAAKC,UAAU,YAAf,SACLD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACxB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLZM,G,MAAY,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAGtC,OACE,uBAAOX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BNG,G,wDAnCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,aAAce,KAAKf,eAE5D,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a9488a2a.chunk.js","sourcesContent":["import React from 'react'\n\nimport './card.style.css'\n\nexport const Card = props =>  {\n  return (\n    <div className=\"card-container\">\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n      <h1>{props.monster.name}</h1>\n      <h2>{props.monster.email}</h2>\n    </div>\n  )\n}","import React from 'react'\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.style.css'\n\n\n\nexport const CardList = (props) => {\n  return <div className=\"card-list\">{\n    props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster}></Card>\n    ))\n  }</div>\n}","\n\nimport React from 'react'\n\nimport './search-box.style.css'\n\nexport const SearchBox = ({placeholder, handleChange}) =>  {\n\n\n  return (\n    <input className=\"search\" \n           type=\"search\" \n           placeholder={placeholder}\n           onChange={handleChange}></input>\n  );\n}","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roledex</h1>\n        <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}